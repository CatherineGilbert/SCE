color = palette, breaks = seq(from = -1, to = 1, length.out = 50),
silent = T)
pheatmap(id_cor, main = paste("Seasonal Correlations for Mat", matval),
labels_row = nametag$tag, cex = 0.5,
color = palette, breaks = seq(from = -1, to = 1, length.out = 50),
silent = T)
id_cor <- cor(t(scfinal_dt), use = "pairwise.complete.obs")
nametag <- filter(final_x, ID %in% colnames(id_cor)) %>%
select(ID, Site, PlantingDate_Sim) %>%
mutate(Planting = format(PlantingDate_Sim, "%j/%Y"),
tag = paste0(ID,": ", Site, " ", Planting))
p3 <- pheatmap(id_cor, main = paste("Seasonal Correlations for Mat", matval),
labels_row = nametag$tag, cex = 0.5,
color = palette, breaks = seq(from = -1, to = 1, length.out = 50),
silent = T)
id_cor
final_dt
View(final_dt)
is_empty(final_dt[1,])
is_empty(final_dt[1,-1])
is_empty(final_dt[1,2:ncol(final_dt)])
is_empty(final_dt[95,2:ncol(final_dt)])
is_empty(final_dt[2:ncol(final_dt)])
?remove_empty
?is_empty
#remove trials where no data was collected
final_dt <- filter(final_dt, !is.na(Rain_2))
#remove parameters that intersect with discarded periods
final_dt <- select(final_dt, !ends_with(paste0("_",badp)))
#remove parameters with near zero variance
nzv_check <- sapply(final_dt, function(x){var(x, na.rm = TRUE)})
nzv <- names(nzv_check)[nzv_check < 1e-5]
final_dt <- select(final_dt, !any_of(nzv))
#remove parameters which are autocorrelated, based on the full runs
final_full <- filter(final_dt, ID %in% full_run_IDs) %>% column_to_rownames("ID") #subset the data to successful runs
var_cor <- cor(final_full)
correlated <- caret::findCorrelation(var_cor, cutoff = 0.90, names = T)
final_dt <- select(final_dt, !any_of(correlated)) #remove autocorrelated variables
#plot removed autocorrelated variables
row_annotation <- data.frame(
Autocorrelation = ifelse(rownames(var_cor) %in% correlated, "Will Be Removed", "Not Removed"))
rownames(row_annotation) <- rownames(var_cor)
p1 <- pheatmap(var_cor, annotation_row = row_annotation, cex = 0.75,
annotation_colors = list(
Autocorrelation = c("Will Be Removed" = "red", "Not Removed" = "black")),
color = palette, breaks = seq(from = -1, to = 1, length.out = 50),
silent = T)
#scale the final parameters used for comparison
scfinal_dt <- final_dt %>%
column_to_rownames("ID") %>%
scale() %>% as.data.frame() #scale variables
#plot heatmap of correlation of final parameters
var_cor2 <- cor(scfinal_dt, use = "pairwise.complete.obs")
p2 <- pheatmap(var_cor2, main = paste("Parameter Correlations for Mat", matval),
color = palette, breaks = seq(from = -1, to = 1, length.out = 50),
silent = T)
id_cor <- cor(t(scfinal_dt), use = "pairwise.complete.obs")
nametag <- filter(final_x, ID %in% colnames(id_cor)) %>%
select(ID, Site, PlantingDate_Sim) %>%
mutate(Planting = format(PlantingDate_Sim, "%j/%Y"),
tag = paste0(ID,": ", Site, " ", Planting))
p3 <- pheatmap(id_cor, main = paste("Seasonal Correlations for Mat", matval),
labels_row = nametag$tag, cex = 0.5,
color = palette, breaks = seq(from = -1, to = 1, length.out = 50),
silent = T)
#dendrograms
pdend <- as.dendrogram(p3$tree_row)
dend_decoration <- tibble(order = 1:length(labels(pdend)),
ID = as.numeric(labels(pdend))) %>%
left_join(select(final_x, ID:Mat))
pdend <- place_labels(pdend, nametag$tag)
labels_cex(pdend) <- 0.5
#dendrogram label colors
unique_sites <- arrange(dend_decoration, Latitude) %>% pull(Site) %>% unique() # Get unique levels of "Site"
n_sites <- length(unique_sites) # Number of unique sites
# Generate a color palette (e.g., using RColorBrewer)
color_palette <- mako(n_sites)
# Create a named vector for the color mapping
color_mapping <- setNames(color_palette, unique_sites)
# Add a new column with hex color values
dend_decoration <- dend_decoration %>% mutate(Color = color_mapping[as.character(Site)])
labels_colors(pdend) <- dend_decoration$Color
par(mai = c(0.5,0,0,1))
#plot_horiz.dendrogram(pdend, xlim = c(6,0), side = TRUE, horiz = TRUE, center = F)
p4 <- plot(pdend, horiz = TRUE, center = T)
par(mai = c(1,1,0,1))
return(list(
"IDs" = colnames(id_cor), #trial IDs
"nametag" = nametag, #used for labels. it's ID/Site/Planting DOY/Year
"used_params" = colnames(scfinal_dt),
"final_dt" = final_dt, #unscaled parameters used for seasonal correlations
"scfinal_dt" = scfinal_dt, #scaled parameters used for seasonal correlations
"autocorr_pheatmap" = p1$gtable,
"used_params_corr_pheatmap" = p2$gtable,
"id_corr_pheatmap" = p3$gtable,
"id_dend_obj" = pdend
))
ID_corr <- function(matval, final_x) {
final_dt <- filter(final_x, Mat == matval) %>%
select(ID, Rain_2:WaterStress_11) %>% #needs to be genericized
#grab only numeric variables (no dates)
select(where(is.numeric)) %>%
#remove constant parameters
remove_constant(na.rm = TRUE)
#remove trials where no data was collected
final_dt <- filter(final_dt, !is.na(Rain_2))
#remove acc_emerged_tt because it's redundant
#final_dt <- select(final_dt, !starts_with("AccEmTT"))
#remove parameters that intersect with discarded periods
final_dt <- select(final_dt, !ends_with(paste0("_",badp)))
#remove parameters with near zero variance
nzv_check <- sapply(final_dt, function(x){var(x, na.rm = TRUE)})
nzv <- names(nzv_check)[nzv_check < 1e-5]
final_dt <- select(final_dt, !any_of(nzv))
#remove parameters which are autocorrelated, based on the full runs
final_full <- filter(final_dt, ID %in% full_run_IDs) %>% column_to_rownames("ID") #subset the data to successful runs
var_cor <- cor(final_full)
correlated <- caret::findCorrelation(var_cor, cutoff = 0.90, names = T)
final_dt <- select(final_dt, !any_of(correlated)) #remove autocorrelated variables
#plot removed autocorrelated variables
row_annotation <- data.frame(
Autocorrelation = ifelse(rownames(var_cor) %in% correlated, "Will Be Removed", "Not Removed"))
rownames(row_annotation) <- rownames(var_cor)
p1 <- pheatmap(var_cor, annotation_row = row_annotation, cex = 0.75,
annotation_colors = list(
Autocorrelation = c("Will Be Removed" = "red", "Not Removed" = "black")),
color = palette, breaks = seq(from = -1, to = 1, length.out = 50),
silent = T)
#scale the final parameters used for comparison
scfinal_dt <- final_dt %>%
column_to_rownames("ID") %>%
scale() %>% as.data.frame() #scale variables
#plot heatmap of correlation of final parameters
var_cor2 <- cor(scfinal_dt, use = "pairwise.complete.obs")
p2 <- pheatmap(var_cor2, main = paste("Parameter Correlations for Mat", matval),
color = palette, breaks = seq(from = -1, to = 1, length.out = 50),
silent = T)
id_cor <- cor(t(scfinal_dt), use = "pairwise.complete.obs")
nametag <- filter(final_x, ID %in% colnames(id_cor)) %>%
select(ID, Site, PlantingDate_Sim) %>%
mutate(Planting = format(PlantingDate_Sim, "%j/%Y"),
tag = paste0(ID,": ", Site, " ", Planting))
p3 <- pheatmap(id_cor, main = paste("Seasonal Correlations for Mat", matval),
labels_row = nametag$tag, cex = 0.5,
color = palette, breaks = seq(from = -1, to = 1, length.out = 50),
silent = T)
#dendrograms
pdend <- as.dendrogram(p3$tree_row)
dend_decoration <- tibble(order = 1:length(labels(pdend)),
ID = as.numeric(labels(pdend))) %>%
left_join(select(final_x, ID:Mat))
pdend <- place_labels(pdend, nametag$tag)
labels_cex(pdend) <- 0.5
#dendrogram label colors
unique_sites <- arrange(dend_decoration, Latitude) %>% pull(Site) %>% unique() # Get unique levels of "Site"
n_sites <- length(unique_sites) # Number of unique sites
# Generate a color palette (e.g., using RColorBrewer)
color_palette <- mako(n_sites)
# Create a named vector for the color mapping
color_mapping <- setNames(color_palette, unique_sites)
# Add a new column with hex color values
dend_decoration <- dend_decoration %>% mutate(Color = color_mapping[as.character(Site)])
labels_colors(pdend) <- dend_decoration$Color
par(mai = c(0.5,0,0,1))
#plot_horiz.dendrogram(pdend, xlim = c(6,0), side = TRUE, horiz = TRUE, center = F)
p4 <- plot(pdend, horiz = TRUE, center = T)
par(mai = c(1,1,0,1))
return(list(
"IDs" = colnames(id_cor), #trial IDs
"nametag" = nametag, #used for labels. it's ID/Site/Planting DOY/Year
"used_params" = colnames(scfinal_dt),
"final_dt" = final_dt, #unscaled parameters used for seasonal correlations
"scfinal_dt" = scfinal_dt, #scaled parameters used for seasonal correlations
"autocorr_pheatmap" = p1$gtable,
"used_params_corr_pheatmap" = p2$gtable,
"id_corr_pheatmap" = p3$gtable,
"id_dend_obj" = pdend
))
}
mid1res <- ID_corr("mid1", final_x)
mid1res$used_params_corr_pheatmap
plot(mid1res$used_params_corr_pheatmap)
ID_corr <- function(matval, final_x) {
final_dt <- filter(final_x, Mat == matval) %>%
select(ID, Rain_2:WaterStress_11) %>% #needs to be genericized
#grab only numeric variables (no dates)
select(where(is.numeric)) %>%
#remove constant parameters
remove_constant(na.rm = TRUE)
#remove trials where no data was collected
final_dt <- filter(final_dt, !is.na(Rain_2))
#remove acc_emerged_tt because it's redundant
#final_dt <- select(final_dt, !starts_with("AccEmTT"))
#remove parameters that intersect with discarded periods
final_dt <- select(final_dt, !ends_with(paste0("_",badp)))
#remove parameters with near zero variance
nzv_check <- sapply(final_dt, function(x){var(x, na.rm = TRUE)})
nzv <- names(nzv_check)[nzv_check < 1e-5]
final_dt <- select(final_dt, !any_of(nzv))
#remove parameters which are autocorrelated, based on the full runs
final_full <- filter(final_dt, ID %in% full_run_IDs) %>% column_to_rownames("ID") #subset the data to successful runs
var_cor <- cor(final_full)
correlated <- caret::findCorrelation(var_cor, cutoff = 0.90, names = T)
final_dt <- select(final_dt, !any_of(correlated)) #remove autocorrelated variables
#plot removed autocorrelated variables
row_annotation <- data.frame(
Autocorrelation = ifelse(rownames(var_cor) %in% correlated, "Will Be Removed", "Not Removed"))
rownames(row_annotation) <- rownames(var_cor)
p1 <- pheatmap(var_cor, annotation_row = row_annotation, cex = 0.75,
annotation_colors = list(
Autocorrelation = c("Will Be Removed" = "red", "Not Removed" = "black")),
color = palette, breaks = seq(from = -1, to = 1, length.out = 50))
#scale the final parameters used for comparison
scfinal_dt <- final_dt %>%
column_to_rownames("ID") %>%
scale() %>% as.data.frame() #scale variables
#plot heatmap of correlation of final parameters
var_cor2 <- cor(scfinal_dt, use = "pairwise.complete.obs")
p2 <- pheatmap(var_cor2, main = paste("Parameter Correlations for Mat", matval),
color = palette, breaks = seq(from = -1, to = 1, length.out = 50))
id_cor <- cor(t(scfinal_dt), use = "pairwise.complete.obs")
nametag <- filter(final_x, ID %in% colnames(id_cor)) %>%
select(ID, Site, PlantingDate_Sim) %>%
mutate(Planting = format(PlantingDate_Sim, "%j/%Y"),
tag = paste0(ID,": ", Site, " ", Planting))
p3 <- pheatmap(id_cor, main = paste("Seasonal Correlations for Mat", matval),
labels_row = nametag$tag, cex = 0.5,
color = palette, breaks = seq(from = -1, to = 1, length.out = 50))
#dendrograms
pdend <- as.dendrogram(p3$tree_row)
dend_decoration <- tibble(order = 1:length(labels(pdend)),
ID = as.numeric(labels(pdend))) %>%
left_join(select(final_x, ID:Mat))
pdend <- place_labels(pdend, nametag$tag)
labels_cex(pdend) <- 0.5
#dendrogram label colors
unique_sites <- arrange(dend_decoration, Latitude) %>% pull(Site) %>% unique() # Get unique levels of "Site"
n_sites <- length(unique_sites) # Number of unique sites
# Generate a color palette (e.g., using RColorBrewer)
color_palette <- mako(n_sites)
# Create a named vector for the color mapping
color_mapping <- setNames(color_palette, unique_sites)
# Add a new column with hex color values
dend_decoration <- dend_decoration %>% mutate(Color = color_mapping[as.character(Site)])
labels_colors(pdend) <- dend_decoration$Color
par(mai = c(0.5,0,0,1))
#plot_horiz.dendrogram(pdend, xlim = c(6,0), side = TRUE, horiz = TRUE, center = F)
p4 <- plot(pdend, horiz = TRUE, center = T)
par(mai = c(1,1,0,1))
return(list(
"IDs" = colnames(id_cor), #trial IDs
"nametag" = nametag, #used for labels. it's ID/Site/Planting DOY/Year
"used_params" = colnames(scfinal_dt),
"final_dt" = final_dt, #unscaled parameters used for seasonal correlations
"scfinal_dt" = scfinal_dt, #scaled parameters used for seasonal correlations
"autocorr_pheatmap" = p1$gtable,
"used_params_corr_pheatmap" = p2$gtable,
"id_corr_pheatmap" = p3$gtable,
"id_dend_obj" = pdend
))
}
mid1res <- ID_corr("mid1", final_x)
final_dt
id_cor
nametag
id_cor
nametag
matval <- "mid1"
for(var in varchoice){
print(var)
x <- ggplot(j_dt) +
aes(x = Site, y = .data[[var]]) +
geom_boxplot() +
theme_minimal()
plot(x)
}
ID_corr <- function(matval, final_x) {
final_dt <- filter(final_x, Mat == matval) %>%
select(ID, Rain_2:WaterStress_11) %>% #needs to be genericized
#grab only numeric variables (no dates)
select(where(is.numeric)) %>%
#remove constant parameters
remove_constant(na.rm = TRUE)
#remove trials where no data was collected
final_dt <- filter(final_dt, !is.na(Rain_2))
#remove acc_emerged_tt because it's redundant
#final_dt <- select(final_dt, !starts_with("AccEmTT"))
#remove parameters that intersect with discarded periods
final_dt <- select(final_dt, !ends_with(paste0("_",badp)))
#remove parameters with near zero variance
nzv_check <- sapply(final_dt, function(x){var(x, na.rm = TRUE)})
nzv <- names(nzv_check)[nzv_check < 1e-5]
final_dt <- select(final_dt, !any_of(nzv))
#remove parameters which are autocorrelated, based on the full runs
final_full <- filter(final_dt, ID %in% full_run_IDs) %>% column_to_rownames("ID") #subset the data to successful runs
var_cor <- cor(final_full)
correlated <- caret::findCorrelation(var_cor, cutoff = 0.90, names = T)
final_dt <- select(final_dt, !any_of(correlated)) #remove autocorrelated variables
#plot removed autocorrelated variables
row_annotation <- data.frame(
Autocorrelation = ifelse(rownames(var_cor) %in% correlated, "Will Be Removed", "Not Removed"))
rownames(row_annotation) <- rownames(var_cor)
p1 <- pheatmap(var_cor, annotation_row = row_annotation, cex = 0.75,
annotation_colors = list(
Autocorrelation = c("Will Be Removed" = "red", "Not Removed" = "black")),
color = palette, breaks = seq(from = -1, to = 1, length.out = 50))
#scale the final parameters used for comparison
scfinal_dt <- final_dt %>%
column_to_rownames("ID") %>%
scale() %>% as.data.frame() #scale variables
#plot heatmap of correlation of final parameters
var_cor2 <- cor(scfinal_dt, use = "pairwise.complete.obs")
p2 <- pheatmap(var_cor2, main = paste("Parameter Correlations for Mat", matval),
color = palette, breaks = seq(from = -1, to = 1, length.out = 50))
id_cor <- cor(t(scfinal_dt), use = "pairwise.complete.obs")
nametag <- filter(final_x, ID %in% colnames(id_cor)) %>%
select(ID, Site, PlantingDate_Sim) %>%
mutate(Planting = format(PlantingDate_Sim, "%j/%Y"),
tag = paste0(ID,": ", Site, " ", Planting))
p3 <- pheatmap(id_cor, main = paste("Seasonal Correlations for Mat", matval),
labels_row = nametag$tag, cex = 0.5,
color = palette, breaks = seq(from = -1, to = 1, length.out = 50))
#dendrograms
pdend <- as.dendrogram(p3$tree_row)
dend_decoration <- tibble(order = 1:length(labels(pdend)),
ID = as.numeric(labels(pdend))) %>%
left_join(select(final_x, ID:Mat))
pdend <- place_labels(pdend, nametag$tag)
labels_cex(pdend) <- 0.5
#dendrogram label colors
unique_sites <- arrange(dend_decoration, Latitude) %>% pull(Site) %>% unique() # Get unique levels of "Site"
n_sites <- length(unique_sites) # Number of unique sites
# Generate a color palette (e.g., using RColorBrewer)
color_palette <- mako(n_sites)
# Create a named vector for the color mapping
color_mapping <- setNames(color_palette, unique_sites)
# Add a new column with hex color values
dend_decoration <- dend_decoration %>% mutate(Color = color_mapping[as.character(Site)])
labels_colors(pdend) <- dend_decoration$Color
par(mai = c(0.5,0,0,1))
#plot_horiz.dendrogram(pdend, xlim = c(6,0), side = TRUE, horiz = TRUE, center = F)
p4 <- plot(pdend, horiz = TRUE, center = T)
par(mai = c(1,1,0,1))
return(list(
"IDs" = colnames(id_cor), #trial IDs
"nametag" = nametag, #used for labels. it's ID/Site/Planting DOY/Year
"used_params" = colnames(scfinal_dt),
"final_dt" = final_dt, #unscaled parameters used for seasonal correlations
"scfinal_dt" = scfinal_dt, #scaled parameters used for seasonal correlations
"autocorr_pheatmap" = p1$gtable,
"used_params_corr_pheatmap" = p2$gtable,
"id_corr_pheatmap" = p3$gtable,
"id_dend_obj" = pdend
))
}
mid1res <- ID_corr("mid1", final_x)
#remove trials where no data was collected
final_dt <- remove_empty(final_dt, which = c("rows"), cutoff = 0.9)
ID_corr <- function(matval, final_x) {
final_dt <- filter(final_x, Mat == matval) %>%
select(ID, Rain_2:WaterStress_11) %>% #needs to be genericized
#grab only numeric variables (no dates)
select(where(is.numeric)) %>%
#remove constant parameters
remove_constant(na.rm = TRUE)
#remove trials where no data was collected
final_dt <- remove_empty(final_dt, which = c("rows"), cutoff = 0.9)
#remove acc_emerged_tt because it's redundant
#final_dt <- select(final_dt, !starts_with("AccEmTT"))
#remove parameters that intersect with discarded periods
final_dt <- select(final_dt, !ends_with(paste0("_",badp)))
#remove parameters with near zero variance
nzv_check <- sapply(final_dt, function(x){var(x, na.rm = TRUE)})
nzv <- names(nzv_check)[nzv_check < 1e-5]
final_dt <- select(final_dt, !any_of(nzv))
#remove parameters which are autocorrelated, based on the full runs
final_full <- filter(final_dt, ID %in% full_run_IDs) %>% column_to_rownames("ID") #subset the data to successful runs
var_cor <- cor(final_full)
correlated <- caret::findCorrelation(var_cor, cutoff = 0.90, names = T)
final_dt <- select(final_dt, !any_of(correlated)) #remove autocorrelated variables
#plot removed autocorrelated variables
row_annotation <- data.frame(
Autocorrelation = ifelse(rownames(var_cor) %in% correlated, "Will Be Removed", "Not Removed"))
rownames(row_annotation) <- rownames(var_cor)
p1 <- pheatmap(var_cor, annotation_row = row_annotation, cex = 0.75,
annotation_colors = list(
Autocorrelation = c("Will Be Removed" = "red", "Not Removed" = "black")),
color = palette, breaks = seq(from = -1, to = 1, length.out = 50))
#scale the final parameters used for comparison
scfinal_dt <- final_dt %>%
column_to_rownames("ID") %>%
scale() %>% as.data.frame() #scale variables
#plot heatmap of correlation of final parameters
var_cor2 <- cor(scfinal_dt, use = "pairwise.complete.obs")
p2 <- pheatmap(var_cor2, main = paste("Parameter Correlations for Mat", matval),
color = palette, breaks = seq(from = -1, to = 1, length.out = 50))
id_cor <- cor(t(scfinal_dt), use = "pairwise.complete.obs")
nametag <- filter(final_x, ID %in% colnames(id_cor)) %>%
select(ID, Site, PlantingDate_Sim) %>%
mutate(Planting = format(PlantingDate_Sim, "%j/%Y"),
tag = paste0(ID,": ", Site, " ", Planting))
p3 <- pheatmap(id_cor, main = paste("Seasonal Correlations for Mat", matval),
labels_row = nametag$tag, cex = 0.5,
color = palette, breaks = seq(from = -1, to = 1, length.out = 50))
#dendrograms
pdend <- as.dendrogram(p3$tree_row)
dend_decoration <- tibble(order = 1:length(labels(pdend)),
ID = as.numeric(labels(pdend))) %>%
left_join(select(final_x, ID:Mat))
pdend <- place_labels(pdend, nametag$tag)
labels_cex(pdend) <- 0.5
#dendrogram label colors
unique_sites <- arrange(dend_decoration, Latitude) %>% pull(Site) %>% unique() # Get unique levels of "Site"
n_sites <- length(unique_sites) # Number of unique sites
# Generate a color palette (e.g., using RColorBrewer)
color_palette <- mako(n_sites)
# Create a named vector for the color mapping
color_mapping <- setNames(color_palette, unique_sites)
# Add a new column with hex color values
dend_decoration <- dend_decoration %>% mutate(Color = color_mapping[as.character(Site)])
labels_colors(pdend) <- dend_decoration$Color
par(mai = c(0.5,0,0,1))
#plot_horiz.dendrogram(pdend, xlim = c(6,0), side = TRUE, horiz = TRUE, center = F)
p4 <- plot(pdend, horiz = TRUE, center = T)
par(mai = c(1,1,0,1))
return(list(
"IDs" = colnames(id_cor), #trial IDs
"nametag" = nametag, #used for labels. it's ID/Site/Planting DOY/Year
"used_params" = colnames(scfinal_dt),
"final_dt" = final_dt, #unscaled parameters used for seasonal correlations
"scfinal_dt" = scfinal_dt, #scaled parameters used for seasonal correlations
"autocorr_pheatmap" = p1$gtable,
"used_params_corr_pheatmap" = p2$gtable,
"id_corr_pheatmap" = p3$gtable,
"id_dend_obj" = pdend
))
}
mid1res <- ID_corr("mid1", final_x)
mid00res <- ID_corr("mid00", final_x)
mid00res$id_dend_obj
?cut
mid00res$id_dend_obj %>% circlize_dendrogram()
install.packages('circlize')
mid00res$id_dend_obj %>% circlize_dendrogram()
final_dt
final_dt2
library(reshape2)
id_cor <- cor(t(final_dt2), use = "pairwise.complete.obs")
id_cor <- cor(t(final_dt), use = "pairwise.complete.obs")
mid00res
mid00res$scfinal_dt
id_cor <- cor(t(mid00res$scfinal_dt), use = "pairwise.complete.obs")
id_cor[lower.tri(id_cor)] <- NA
IDs <- colnames(id_cor)
id_edges <- melt(id_cor, varnames = c("Site1", "Site2"), value.name = "Corr")
IDs <- colnames(id_cor)
id_edges <- melt(id_cor, varnames = c("Site1", "Site2"), value.name = "Corr")
id_edges <- filter(id_edges, !is.na(Corr))
id_edges <- filter(id_edges, Site1 != Site2)
id_verts <- filter(final_x, ID %in% IDs)
site_net <- graph_from_data_frame(id_edges, directed = FALSE, vertices = id_verts)
library(igraph)
mid00res$scfinal_dt
id_cor <- cor(t(mid00res$scfinal_dt), use = "pairwise.complete.obs")
id_cor[lower.tri(id_cor)] <- NA
IDs <- colnames(id_cor)
id_edges <- melt(id_cor, varnames = c("Site1", "Site2"), value.name = "Corr")
id_edges <- filter(id_edges, !is.na(Corr))
id_edges <- filter(id_edges, Site1 != Site2)
id_verts <- filter(final_x, ID %in% IDs)
site_net <- graph_from_data_frame(id_edges, directed = FALSE, vertices = id_verts)
jitter_factor = 50
latlong <- select(id_verts, Longitude, Latitude) %>%
mutate(Longitude = jitter(.$Longitude, factor = jitter_factor),
Latitude = jitter(.$Latitude, factor = jitter_factor)) %>% # add jitter for overlaps
as.matrix() %>% unname() ; head(latlong)
library(paletteer)
library(pals)
plasma(10)
library(RColorBrewer)
# Map the scaled values to colors
# Create 100 colors in the palette, and map the scaled values to these colors
hex_colors <- paletteer_c("ggthemes::Classic Orange-Blue", 100)[as.numeric(cut(E(site_net)$Corr, breaks = seq(-1, 1, length.out = 100)))]
par(mai = c(0,0,0,0))
plot(site_net, layout = latlong, asp = 0,
vertex.label.color = "black", vertex.size = 5,
vertex.label.cex = 0.5, vertex.color = NA,
vertex.frame.color = NA,
edge.color = hex_colors
)
latlong <- select(id_verts, Longitude, Latitude) %>% as.matrix() %>% unname()
library(paletteer)
library(pals)
plasma(10)
library(RColorBrewer)
# Map the scaled values to colors
# Create 100 colors in the palette, and map the scaled values to these colors
hex_colors <- paletteer_c("ggthemes::Classic Orange-Blue", 100)[as.numeric(cut(E(site_net)$Corr, breaks = seq(-1, 1, length.out = 100)))]
par(mai = c(0,0,0,0))
plot(site_net, layout = latlong, asp = 0,
vertex.label.color = "black", vertex.size = 5,
vertex.label.cex = 0.5, vertex.color = NA,
vertex.frame.color = NA,
edge.color = hex_colors
)
mid00res$scfinal_dt
mid00res$scfinal_dt
id_verts
View(id_verts)
id_edges
id_edges
mid00res$scfinal_dt
