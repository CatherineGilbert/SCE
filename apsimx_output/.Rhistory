plot(pdend, horiz = T, main = "Seasonal Similarity")
dend_compare <- dendlist(distance_tree, pdend)
tanglegram(dend_compare)
id_cor
id_cor - dist_mx
id_cor - (1 - dist_mx)
id_cor - (1 - dist_mx) %>% heatmap()
id_cor - (1 - dist_mx) %>% pheatmap()
id_cor - (1 - dist_mx) %>% pheatmap(order_cols = F)
id_cor - (1 - dist_mx) %>% pheatmap(cluster_cols = F, cluster_rows = F)
abs(id_cor - (1 - dist_mx)) %>% pheatmap(cluster_cols = F, cluster_rows = F)
1 - dist_mx
id_cor - (1 - dist_mx)
abs(id_cor - (1 - dist_mx))
abs(id_cor - (1 - dist_mx)) %>% pheatmap(cluster_cols = F, cluster_rows = F)
(id_cor - (1 - dist_mx)) %>% pheatmap(cluster_cols = F, cluster_rows = F)
(id_cor - (1 - dist_mx)) %>% pheatmap(cluster_cols = F, cluster_rows = F)
abs(id_cor - (1 - dist_mx)) %>% pheatmap(cluster_cols = F, cluster_rows = F)
(id_cor - (1 - dist_mx))
max((id_cor - (1 - dist_mx)))
id_cor
pheatmap(id_cor,cluster_cols = F, cluster_rows = F)
library(readr)
soy_year_stability_testing <- read_csv("C:/Users/cmg3/Documents/GitHub/SCT/example_input_files/soy_year_stability_testing.csv")
View(soy_year_stability_testing)
library(readr)
soy_example_input <- read_csv("C:/Users/cmg3/Documents/GitHub/SCT/example_input_files/soy_example_input.csv")
View(soy_example_input)
soy_example_input
select(soy_example_input, Site, Latitude, Longitude, Genetics, Planting)
soyt <- select(soy_example_input, Site, Latitude, Longitude, Genetics, Planting)
soyt
soyt <- select(soy_example_input, Site, Latitude, Longitude, Genetics, Planting) %>%
mutate(Genetics = 2.5)
soyt
soyt <- select(soy_example_input, Site, Latitude, Longitude, Genetics, Planting) %>%
mutate(Genetics = 2.5) %>% distinct()
soyt
View(soyt)
?reframe
esquisser(soyt)
library(geosphere)
?dist
?dist2gc
?distHaversine
select(soyt, Site, Latitude, Longitude)
distinct(select(soyt, Site, Latitude, Longitude))
coord_list <- distinct(select(soyt, Site, Latitude, Longitude))
coords <- distinct(select(soyt, Site, Latitude, Longitude))
distm(coods[, c("Longitude","Latitude")],fun = distHaversine)
distm(coords[, c("Longitude","Latitude")],fun = distHaversine)
distm(soyt[, c("Longitude","Latitude")],fun = distHaversine)
final_dt
scfinal_dt
unique_sites
final_x
id_cor
scfinal_dt
final_dt
sitedistances_dt <- distm(trials_x[, c("Longitude","Latitude")],fun = distHaversine)
sitedistances_dt
filter(nametag, ID %in% id_list)
id_list
scale(sitedistances_dt, center = F)
?distm
sitedistances_dt
sitedist_dt <- distm(trials_x[, c("Longitude","Latitude")],fun = distHaversine)
sitedist_mx <- scale(sitedistances_dt, center = F)
sitedist_tree <- hclust(as.dist(sitedist_mx))
plot(sitedist_tree)
id_list
sitedist_dt <- sitedist_dt[id_list,id_list]
View(sitedist_dt)
sitedist_dt <- distm(trials_x[, c("Longitude","Latitude")],fun = distHaversine)
sitedist_dt <- distm(trials_x[, c("Longitude","Latitude")],fun = distHaversine)
sitedist_dt
sitedist_dt <- distm(trials_x[, c("Longitude","Latitude")],fun = distHaversine) %>% as.matrix()
sitedist_dt <- distm(trials_x[, c("Longitude","Latitude")],fun = distHaversine)
sitedist_dt <- sitedist_dt[id_list,id_list]
sitedist_mx <- scale(sitedistances_dt, center = F)
sitedist_tree <- hclust(as.dist(sitedist_mx))
par(mai = c(1,1,1,1))
plot(sitedist_tree)
sitedist_mx
sitedist_mx <- distm(trials_x[, c("Longitude","Latitude")],fun = distHaversine)
rownames(sitedist_mx) <- c(1:nrow(sitedist_mx))
sitedist_mx
colnames(sitedist_mx) <- c(1:ncol(sitedist_mx))
sitedist_mx
flt_sitedist_mx <- sitedist_mx[id_list,id_list]
flt_sitedist_mx <- sitedist_mx[id_list,id_list]
flt_sitedist_mx <- scale(flt_sitedist_mx, center = F)
flt_sitedist_mx
flt_sitedist_mx <- sitedist_mx[id_list,id_list]
flt_sitedist_mx <- scale(flt_sitedist_mx, center = F)
sitedist_tree <- hclust(as.dist(flt_sitedist_mx))
par(mai = c(1,1,1,1))
plot(sitedist_tree)
flt_sitedist_mx <- sitedist_mx[id_list,id_list]
flt_sitedist_mx <- scale(flt_sitedist_mx, center = F)
sitedist_tree <- hclust(as.dist(flt_sitedist_mx)) %>% as.dendrogram()
plot(sitedist_tree, horiz = T, main = "Physical Distance")
plot(pdend, horiz = T, main = "Seasonal Similarity")
(id_cor - (1 - dist_mx)) %>% pheatmap(cluster_cols = F, cluster_rows = F)
abs(id_cor - (1 - dist_mx)) %>% pheatmap(cluster_cols = F, cluster_rows = F)
pheatmap(id_cor,cluster_cols = F, cluster_rows = F)
id_cor
1 - dist_mx
dist_mx
soyt <- select(soy_example_input, Site, Latitude, Longitude, Genetics, Planting) %>%
mutate(Genetics = 2.5) %>% distinct()
soyt
soyt
expand_grid(soyt$Site,c("2024-05-01","2024-05-08","2024-05-15","2024-05-22","2024-05-29",
)
)
c("2024-05-01","2024-05-08","2024-05-15","2024-05-22","2024-05-29",
"2024-06-05","2024-06-12","2024-06-19","2024-06-26",
"2023-05-01","2023-05-08","2023-05-15","2023-05-22","2023-05-29",
"2023-06-05","2023-06-12","2023-06-19","2023-06-26",
"2022-05-01","2022-05-08","2022-05-15","2022-05-22","2022-05-29",
"2022-06-05","2022-06-12","2022-06-19","2022-06-26",
"2021-05-01","2021-05-08","2021-05-15","2021-05-22","2021-05-29",
"2021-06-05","2021-06-12","2021-06-19","2021-06-26",
"2020-05-01","2020-05-08","2020-05-15","2020-05-22","2020-05-29",
"2020-06-05","2020-06-12","2020-06-19","2020-06-26")
?expand.grid
soyt
soyt$Site
expand_grid(soyt$Site,c("2024-05-01","2024-05-08","2024-05-15","2024-05-22","2024-05-29",
"2024-06-05","2024-06-12","2024-06-19","2024-06-26",
"2023-05-01","2023-05-08","2023-05-15","2023-05-22","2023-05-29",
"2023-06-05","2023-06-12","2023-06-19","2023-06-26",
"2022-05-01","2022-05-08","2022-05-15","2022-05-22","2022-05-29",
"2022-06-05","2022-06-12","2022-06-19","2022-06-26",
"2021-05-01","2021-05-08","2021-05-15","2021-05-22","2021-05-29",
"2021-06-05","2021-06-12","2021-06-19","2021-06-26",
"2020-05-01","2020-05-08","2020-05-15","2020-05-22","2020-05-29",
"2020-06-05","2020-06-12","2020-06-19","2020-06-26"))
test <- expand_grid(soyt$Site,c("2024-05-01","2024-05-08","2024-05-15","2024-05-22","2024-05-29",
"2024-06-05","2024-06-12","2024-06-19","2024-06-26",
"2023-05-01","2023-05-08","2023-05-15","2023-05-22","2023-05-29",
"2023-06-05","2023-06-12","2023-06-19","2023-06-26",
"2022-05-01","2022-05-08","2022-05-15","2022-05-22","2022-05-29",
"2022-06-05","2022-06-12","2022-06-19","2022-06-26",
"2021-05-01","2021-05-08","2021-05-15","2021-05-22","2021-05-29",
"2021-06-05","2021-06-12","2021-06-19","2021-06-26",
"2020-05-01","2020-05-08","2020-05-15","2020-05-22","2020-05-29",
"2020-06-05","2020-06-12","2020-06-19","2020-06-26"))
test
test <- expand_grid(Site = soyt$Site, Planting = c("2024-05-01","2024-05-08","2024-05-15","2024-05-22","2024-05-29",
"2024-06-05","2024-06-12","2024-06-19","2024-06-26",
"2023-05-01","2023-05-08","2023-05-15","2023-05-22","2023-05-29",
"2023-06-05","2023-06-12","2023-06-19","2023-06-26",
"2022-05-01","2022-05-08","2022-05-15","2022-05-22","2022-05-29",
"2022-06-05","2022-06-12","2022-06-19","2022-06-26",
"2021-05-01","2021-05-08","2021-05-15","2021-05-22","2021-05-29",
"2021-06-05","2021-06-12","2021-06-19","2021-06-26",
"2020-05-01","2020-05-08","2020-05-15","2020-05-22","2020-05-29",
"2020-06-05","2020-06-12","2020-06-19","2020-06-26"))
test
right_join(test, select(soyt, Site, Latitude, Longitude))
left_join(test, select(soyt, Site, Latitude, Longitude))
test
test <- expand_grid(Site = soyt$Site, Planting = c("2024-05-01","2024-05-08","2024-05-15","2024-05-22","2024-05-29",
"2024-06-05","2024-06-12","2024-06-19","2024-06-26",
"2023-05-01","2023-05-08","2023-05-15","2023-05-22","2023-05-29",
"2023-06-05","2023-06-12","2023-06-19","2023-06-26",
"2022-05-01","2022-05-08","2022-05-15","2022-05-22","2022-05-29",
"2022-06-05","2022-06-12","2022-06-19","2022-06-26",
"2021-05-01","2021-05-08","2021-05-15","2021-05-22","2021-05-29",
"2021-06-05","2021-06-12","2021-06-19","2021-06-26",
"2020-05-01","2020-05-08","2020-05-15","2020-05-22","2020-05-29",
"2020-06-05","2020-06-12","2020-06-19","2020-06-26"))
select(soyt, Site, Latitude, Longitude)
left_join(test, select(soyt, Site, Latitude, Longitude))
left_join(test, select(soyt, Site, Latitude, Longitude), by = join_by(Site))
test <- left_join(test, select(soyt, Site, Latitude, Longitude), by = join_by(Site))
test
distinct(test)
test <- distinct(test)
View(test)
test <- mutate(test, Genetics = 2.5)
library(readr)
maize_example_input <- read_csv("C:/Users/cmg3/Documents/GitHub/SCT/example_input_files/maize_example_input.csv")
View(maize_example_input)
setwd("C:/Users/cmg3/Documents/GitHub/SCT/example_input_files")
write_csv(test, "dateshift_test.csv")
library(shiny)
library(shinydashboard)
library(shinyWidgets)
library(shinyBS)
library(shinyjs)
library(DT)
library(readr)
library(dplyr)
library(pheatmap)
library(apsimx)
library(tidyverse)
library(daymetr)
library(data.table)
library(RColorBrewer)
library(pheatmap)
library(janitor)
library(tidyverse)
library(esquisse)
library(tidyr)
library(zip)
library(here)
setwd("C:/Users/cmg3/Documents/GitHub/SCT")
setwd("C:/Users/cmg3/Documents/GitHub/SCT")
#debug
# output_dir <- "C:/Users/cmg3/Documents/GitHub/SCT/apsimx_output"
# setwd(output_dir)
codes_dir <- "C:/Users/cmg3/Documents/GitHub/SCT"
#codes_dir <- here() #where the folder with the codes is
output_dir <- paste0(codes_dir,"/apsimx_output") #folder where the output goes
setwd(output_dir)
parms <- read_csv("parameters.csv", progress = F, show_col_types = F) #pull trial parameters set in app, then set here
mat_handling <- pull(parms, mat_handling)
weather_aquis <- pull(parms, weather_aquis)
soil_aquis <- pull(parms, soil_aquis)
soil_aquis
templ_model_path <- list.files(paste0(codes_dir,"/input"), pattern = ".apsimx", full.names = TRUE)[1]
templ_model <- file_path_sans_ext(basename(templ_model_path))
library(apsimx)
library(tidyverse)
library(daymetr)
library(data.table)
library(soilDB)
library(spData)
library(here)
library(tools)
library(parallel)
templ_model <- file_path_sans_ext(basename(templ_model_path))
trials_df <- list.files(paste0(codes_dir,"/input"), pattern = ".csv", full.names = TRUE)[1] %>%
read_csv(., progress = F, show_col_types = F)
print("Handle Input Dates ...")
trials_df <- mutate(trials_df, ID = row_number()) %>% rename(X = Longitude, Y = Latitude)
locs_df <- select(trials_df, X, Y) %>% distinct() %>% mutate(ID_Loc = row_number())
trials_df <- left_join(trials_df, locs_df, by = join_by(X,Y))
#require year as part of the input
prev_year <- as.numeric(substr(Sys.time(),1,4)) - 1
yesterday <- as.character(today() - days(1))
trials_df <- suppressWarnings(mutate(trials_df, Year = as.numeric(str_extract(Planting, "\\b\\d{4}\\b"))))
trials_df <- suppressWarnings(mutate(trials_df, PlantingDate = as_date(as.character(trials_df$Planting), format = "%Y-%m-%d")))
trials_df <- mutate(trials_df,
Year = ifelse(is.na(PlantingDate), Year, format(PlantingDate,"%Y")),
Year = ifelse(is.na(Year), prev_year, Year), #if no year, use last year with full data
# if no planting date, use beginning and end of year as boundaries
sim_start = if_else(is.na(PlantingDate), as_date(paste0(as.character(Year),"-01-01")), as_date(PlantingDate %m-% months(1))),
sim_end = if_else(is.na(PlantingDate), as_date(paste0(as.character(Year),"-12-31")), as_date(PlantingDate %m+% months(10))))
print("Handle Crop Maturities ...")
# Get what maturities of cultivar we'll use
if (mat_handling == "Soy"){
trials_df <- trials_df %>% mutate(gen1 = floor(Genetics), gen2 = Genetics - gen1) %>%
mutate(gen1 = case_when(
gen1 >= 10 ~ "10",
gen1 <= -2 ~ "000",
gen1 == -1 ~ "00",
gen1 == 0 ~ "0",
gen1 >= 1 & Genetics <= 9 ~ as.character(gen1)
)) %>% mutate(gen2 = case_when(
gen1 >= 8 ~ "Generic_MG",
gen2 >= 0 & gen2 < 0.33 ~ "early",
gen2 >= 0.33 & gen2 < 0.66 ~ "mid",
gen2 >= 0.66 ~ "late"
)) %>% mutate(Mat = paste0(gen2,gen1)) %>%
select(-gen1, -gen2)
}
if (mat_handling == "Maize"){
trials_df <- trials_df %>% mutate(lett = str_to_upper(str_extract(Genetics,"^[A-Za-z]")),
num = as.numeric(str_extract(Genetics,"\\d+")))
trials_df <- trials_df %>% mutate(lett = ifelse(is.na(lett), "B", lett))
corn_mats <- c(80,90,95,100,103,105,108,110,112,115,120,130)
trials_df <- trials_df %>% rowwise() %>%
mutate(num = corn_mats[which.min(abs(corn_mats - num))[1]]) %>%
mutate(Mat = paste0(lett,"_",as.character(num)))
trials_df <- select(trials_df, -lett, -num)
}
if (mat_handling == "Direct"){
trials_df <- mutate(trials_df, Mat = Genetics)
}
print("Get Weather Data ...")
# For each location, collect weather data for years from minimum (first requested year, ten years before now) to most recent full year
locyear_df <- trials_df %>% select(X,Y,ID_Loc, sim_start) %>%
mutate(first_year = year(sim_start)) %>%
select(-sim_start) %>% unique() %>% group_by(ID_Loc,X,Y) %>%
summarize(first_year = min(first_year), .groups = c(ID_Loc,X,Y)) %>%
mutate(first_year = min(first_year, prev_year - 10))
trials_df
trials_df %>% select(X,Y,ID_Loc, sim_start) %>%
mutate(first_year = year(sim_start)) %>%
select(-sim_start) %>% unique()
trials_df %>% select(X,Y,ID_Loc, sim_start) %>%
mutate(first_year = year(sim_start)) %>%
select(-sim_start) %>% unique() %>% group_by(ID_Loc,X,Y)
trials_df %>% select(X,Y,ID_Loc, sim_start) %>%
mutate(first_year = year(sim_start)) %>%
select(-sim_start) %>% unique() %>% group_by(ID_Loc,X,Y) %>%
summarize(first_year = min(first_year), .groups = c(ID_Loc,X,Y))
# For each location, collect weather data for years from minimum (first requested year, ten years before now) to most recent full year
locyear_df <- trials_df %>% select(X,Y,ID_Loc, sim_start) %>%
mutate(first_year = year(sim_start)) %>%
select(-sim_start) %>% unique() %>% group_by(ID_Loc,X,Y) %>%
summarize(first_year = min(first_year)) %>%
mutate(first_year = min(first_year, prev_year - 10))
library(readr)
Soy_Template_366_out <- read_csv("apsim/trial_366/Soy_Template_366_out.csv")
View(Soy_Template_366_out)
# Run APSIM files -----
print("Run APSIM Files ...")
# Define the number of batches
if (nrow(trials_df) <= 10) {
num_batches <- 1 # If there are few trials, only run one batch.
} else {num_batches <- 20} # You can change this to run different percentages at a time
# Start, set up trials_df -----
library(apsimx)
library(tidyverse)
library(daymetr)
library(data.table)
library(soilDB)
library(spData)
library(here)
library(tools)
library(parallel)  # For parallel computing
Sys.setlocale("LC_ALL", "English_United States")
start_time <- Sys.time() # track running time
print("Starting ...")
#debug
# output_dir <- "C:/Users/cmg3/Documents/GitHub/SCT/apsimx_output"
# setwd(output_dir)
codes_dir <- "C:/Users/cmg3/Documents/GitHub/SCT"
#codes_dir <- here() #where the folder with the codes is
output_dir <- paste0(codes_dir,"/apsimx_output") #folder where the output goes
setwd(output_dir)
parms <- read_csv("parameters.csv", progress = F, show_col_types = F) #pull trial parameters set in app, then set here
mat_handling <- pull(parms, mat_handling)
weather_aquis <- pull(parms, weather_aquis)
soil_aquis <- pull(parms, soil_aquis)
templ_model_path <- list.files(paste0(codes_dir,"/input"), pattern = ".apsimx", full.names = TRUE)[1]
templ_model <- file_path_sans_ext(basename(templ_model_path))
trials_df <- list.files(paste0(codes_dir,"/input"), pattern = ".csv", full.names = TRUE)[1] %>%
read_csv(., progress = F, show_col_types = F)
print("Handle Input Dates ...")
trials_df <- mutate(trials_df, ID = row_number()) %>% rename(X = Longitude, Y = Latitude)
locs_df <- select(trials_df, X, Y) %>% distinct() %>% mutate(ID_Loc = row_number())
trials_df <- left_join(trials_df, locs_df, by = join_by(X,Y))
#require year as part of the input
prev_year <- as.numeric(substr(Sys.time(),1,4)) - 1
yesterday <- as.character(today() - days(1))
trials_df <- suppressWarnings(mutate(trials_df, Year = as.numeric(str_extract(Planting, "\\b\\d{4}\\b"))))
trials_df <- suppressWarnings(mutate(trials_df, PlantingDate = as_date(as.character(trials_df$Planting), format = "%Y-%m-%d")))
trials_df <- mutate(trials_df,
Year = ifelse(is.na(PlantingDate), Year, format(PlantingDate,"%Y")),
Year = ifelse(is.na(Year), prev_year, Year), #if no year, use last year with full data
# if no planting date, use beginning and end of year as boundaries
sim_start = if_else(is.na(PlantingDate), as_date(paste0(as.character(Year),"-01-01")), as_date(PlantingDate %m-% months(1))),
sim_end = if_else(is.na(PlantingDate), as_date(paste0(as.character(Year),"-12-31")), as_date(PlantingDate %m+% months(10))))
print("Handle Crop Maturities ...")
# Get what maturities of cultivar we'll use
if (mat_handling == "Soy"){
trials_df <- trials_df %>% mutate(gen1 = floor(Genetics), gen2 = Genetics - gen1) %>%
mutate(gen1 = case_when(
gen1 >= 10 ~ "10",
gen1 <= -2 ~ "000",
gen1 == -1 ~ "00",
gen1 == 0 ~ "0",
gen1 >= 1 & Genetics <= 9 ~ as.character(gen1)
)) %>% mutate(gen2 = case_when(
gen1 >= 8 ~ "Generic_MG",
gen2 >= 0 & gen2 < 0.33 ~ "early",
gen2 >= 0.33 & gen2 < 0.66 ~ "mid",
gen2 >= 0.66 ~ "late"
)) %>% mutate(Mat = paste0(gen2,gen1)) %>%
select(-gen1, -gen2)
}
if (mat_handling == "Maize"){
trials_df <- trials_df %>% mutate(lett = str_to_upper(str_extract(Genetics,"^[A-Za-z]")),
num = as.numeric(str_extract(Genetics,"\\d+")))
trials_df <- trials_df %>% mutate(lett = ifelse(is.na(lett), "B", lett))
corn_mats <- c(80,90,95,100,103,105,108,110,112,115,120,130)
trials_df <- trials_df %>% rowwise() %>%
mutate(num = corn_mats[which.min(abs(corn_mats - num))[1]]) %>%
mutate(Mat = paste0(lett,"_",as.character(num)))
trials_df <- select(trials_df, -lett, -num)
}
if (mat_handling == "Direct"){
trials_df <- mutate(trials_df, Mat = Genetics)
}
print("Get Weather Data ...")
# For each location, collect weather data for years from minimum (first requested year, ten years before now) to most recent full year
locyear_df <- trials_df %>% select(X,Y,ID_Loc, sim_start) %>%
mutate(first_year = year(sim_start)) %>%
select(-sim_start) %>% unique() %>% group_by(ID_Loc,X,Y) %>%
summarize(first_year = min(first_year)) %>%
mutate(first_year = min(first_year, prev_year - 10))
# Run APSIM files -----
print("Run APSIM Files ...")
# Define the number of batches
if (nrow(trials_df) <= 10) {
num_batches <- 1 # If there are few trials, only run one batch.
} else {num_batches <- 20} # You can change this to run different percentages at a time
# Calculate the number of trials per batch
batch_size <- ceiling(nrow(trials_df) / num_batches)
clusterExport(cl, c("trials_df", "codes_dir", "templ_model", "edit_apsimx",
"edit_apsimx_replace_soil_profile", "paste0", "dir.create",
"file.copy", "tryCatch", "print", "apsimx", "mutate",
"write_csv", "soil_profile_list"))
# Setup for parallel processing
no_cores <- detectCores() - 2  # Reserve 2 cores for the system
cl <- makeCluster(no_cores)
clusterExport(cl, varlist = c("locyear_df","yesterday","get_daymet2_apsim_met","get_power_apsim_met",
"napad_apsim_met", "impute_apsim_met", "write_apsim_met","prev_year","weather_aquis"), envir = environment())
# Define the number of batches
if (nrow(trials_df) <= 10) {
num_batches <- 1 # If there are few trials, only run one batch.
} else {num_batches <- 20} # You can change this to run different percentages at a time
# Calculate the number of trials per batch
batch_size <- ceiling(nrow(trials_df) / num_batches)
clusterExport(cl, c("trials_df", "codes_dir", "templ_model", "edit_apsimx",
"edit_apsimx_replace_soil_profile", "paste0", "dir.create",
"file.copy", "tryCatch", "print", "apsimx", "mutate",
"write_csv", "soil_profile_list"))
# Initialize a list to hold results from all batches
all_results <- list()
soil_profile_list <- readRDS("C:/Users/cmg3/Documents/GitHub/SCT/apsimx_output/soils/soil_profile_list.rds")
clusterExport(cl, c("trials_df", "codes_dir", "templ_model", "edit_apsimx",
"edit_apsimx_replace_soil_profile", "paste0", "dir.create",
"file.copy", "tryCatch", "print", "apsimx", "mutate",
"write_csv", "soil_profile_list"))
# Initialize a list to hold results from all batches
all_results <- list()
# Process each batch
for (batch in 1:num_batches) {
# Determine the rows for the current batch
batch_rows <- ((batch - 1) * batch_size + 1):min(nrow(trials_df), batch * batch_size)
batch_trials <- trials_df[batch_rows, ]
# Split trials for parallel execution
trial_list <- split(batch_trials, seq(nrow(batch_trials)))
# Run APSIM simulations in parallel for the current batch
# Run APSIM simulations in parallel
results <- parLapply(cl, trial_list, function(trial) {
trial_n <- trial$ID  # Assuming 'ID' is the identifier
source_dir <- paste0("apsim/trial_", trial_n)
filename <- paste0(templ_model, "_", trial_n, ".apsimx")
output <- data.frame()  # Initialize an empty data frame for the results
# Wrap APSIM simulation and result handling in tryCatch to handle any errors
tryCatch({
output_tmp <- apsimx(filename, src.dir = source_dir, cleanup = TRUE, silent = TRUE)
output_tmp <- mutate(output_tmp, "ID" = trial_n)
# Append the output of this trial to the overall results
# output <- rbind(output, output_tmp)
# Save individual trial results
write_csv(output_tmp, file = paste0(source_dir, "/", templ_model, "_", trial_n, "_out.csv"))
#return(output)
return()
}, error = function(e){
cat(paste0("Simulation for trial ", trial_n, " failed with error: ", e$message, "\n"))
return(NULL)  # Return NULL if there was an error
})
})
# Combine the results from this batch and add to the all_results list
#batch_results <- do.call(rbind, results)
#all_results[[batch]] <- batch_results
# Print out the progress
cat(sprintf("Completed batch %d out of %d (%.2f%%)\n", batch, num_batches, 100 * batch / num_batches))
}
?write_csv
locs_tmp <- locs_df[locs_df$ID_Loc == 1,]
locs_tmp
soil_profile_tmp <- get_ssurgo_soil_profile(lonlat = c(locs_tmp$X,locs_tmp$Y), fix = T)
soil_profile_tmp
horizon <- soil_profile_tmp[[1]]$soil
horizon
soilwat <- soilwat_parms() #creating SWCON in SoilWater parameters
PO <- 1-horizon$BD/2.65
soilwat$SWCON <- (PO-horizon$DUL)/PO
soilwat$SWCON <- ifelse(soilwat$SWCON < 0, 0, soilwat$SWCON)
soilwat$Thickness <- horizon$Thickness
soil_profile_tmp[[1]]$soilwat <- soilwat
initwat <- initialwater_parms() #set initial water to reasonable values
initwat$InitialValues <- horizon$DUL
initwat$Thickness <- horizon$Thickness
soil_profile_tmp[[1]]$initialwater <- initwat
soil_profile_tmp
View(soil_profile_tmp)
oc_min <- 0.001 #set minimum carbon content in soils
given_oc <- soil_profile_tmp[[1]][["soil"]]$Carbon
soil_profile_tmp[[1]][["soil"]]$Carbon <- ifelse(given_oc < oc_min, oc_min, given_oc)
final_x
library(readr)
trials_x <- read_csv("output/trials_x.csv")
View(trials_x)
library(readr)
trials_x <- read_csv("output/trials_x.csv")
View(trials_x)
library(readr)
daily_charact_x <- read_csv("output/daily_charact_x.csv")
View(daily_charact_x)
library(readr)
charact_x <- read_csv("output/charact_x.csv")
View(charact_x)
pastetag <- " by Site (Maturity: "
pastetag
colnames(var_mat)
varchoice <- charact_x %>% ungroup() %>% select(where(is.numeric) &
!c(ID, Period, Period_Start_DOY, Duration, Period_End_DOY)) %>% names()
varchoice
accumulatedData
?reactiveValues
isolate(trial_comp_outs)
